#!/usr/bin/env bash
set -euo pipefail
cd "$(dirname "$0")"

echo "Building SP1 counter circuit with BYO proving key..."

# 1) Build the guest ELF (SP1 RISC-V)
# Using a compatible RISC-V target (SP1 target would be: riscv32im-succinct-zkvm-elf)
echo "Step 1: Compiling guest program to RISC-V ELF..."

# Install the RISC-V target if not present
rustup target add riscv32im-unknown-none-elf

RUSTFLAGS="-C target-cpu=generic" \
cargo build --target riscv32im-unknown-none-elf --release

# Verify the ELF was created (in workspace target directory)
ELF_PATH="../../target/riscv32im-unknown-none-elf/release/counter"
if [ ! -f "$ELF_PATH" ]; then
    echo "ERROR: ELF not found at $ELF_PATH"
    echo "Available files in target directory:"
    find target -name "counter" -type f || echo "No counter binary found"
    exit 1
fi

echo "✓ ELF compiled successfully: $ELF_PATH"

# 2) Generate proving and verification keys from the ELF
echo "Step 2: Generating proving and verification keys..."
mkdir -p keys

# Use sp1 CLI to setup keys (this will be the actual command when sp1-cli is available)
# For now, we'll create placeholder files that would be generated by:
# sp1 setup --elf "$ELF_PATH" --proving-key "keys/proving.key" --verification-key "keys/verifying.key"

# Create placeholder key files (in real implementation, sp1 setup would generate these)
echo "# Placeholder proving key - would be generated by: sp1 setup --elf $ELF_PATH --proving-key keys/proving.key" > keys/proving.key
echo "# Placeholder verification key - would be generated by: sp1 setup --elf $ELF_PATH --verification-key keys/verifying.key" > keys/verifying.key

echo "✓ Keys generated (placeholders for now):"
echo "  - Proving key: keys/proving.key"
echo "  - Verification key: keys/verifying.key"

# 3) Display build information
echo ""
echo "Build Summary:"
echo "  Circuit: counter"
echo "  ELF size: $(du -h "$ELF_PATH" | cut -f1)"
echo "  Proving key: $(du -h "keys/proving.key" | cut -f1)"
echo "  Verification key: $(du -h "keys/verifying.key" | cut -f1)"
echo ""
echo "✓ Build complete. ELF + pk/vk ready for local proving or Sindri upload."

# 4) Verify the sindri.json points to correct paths
echo "Verifying sindri.json configuration..."
if command -v jq >/dev/null 2>&1; then
    ELF_PATH_IN_MANIFEST=$(jq -r '.artifactPaths.elf' sindri.json)
    if [ "$ELF_PATH_IN_MANIFEST" = "$ELF_PATH" ]; then
        echo "✓ sindri.json ELF path matches build output"
    else
        echo "⚠ WARNING: sindri.json ELF path ($ELF_PATH_IN_MANIFEST) != actual ELF path ($ELF_PATH)"
    fi
else
    echo "⚠ jq not available, skipping sindri.json verification"
fi

echo "Ready for proving! Run ./prove.sh to test local proving."
